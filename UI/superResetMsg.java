/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'superResetMsg'
 * message type.
 */

public class superResetMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 4;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = -1;

    /** Create a new superResetMsg of size 4. */
    public superResetMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new superResetMsg of the given data_length. */
    public superResetMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new superResetMsg with the given data_length
     * and base offset.
     */
    public superResetMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new superResetMsg using the given byte array
     * as backing store.
     */
    public superResetMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new superResetMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public superResetMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new superResetMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public superResetMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new superResetMsg embedded in the given message
     * at the given base offset.
     */
    public superResetMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new superResetMsg embedded in the given message
     * at the given base offset and length.
     */
    public superResetMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <superResetMsg> \n";
      try {
        s += "  [key1=0x"+Long.toHexString(get_key1())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [key2=0x"+Long.toHexString(get_key2())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [key3=0x"+Long.toHexString(get_key3())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [key4=0x"+Long.toHexString(get_key4())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: key1
    //   Field type: short, unsigned
    //   Offset (bits): 0
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'key1' is signed (false).
     */
    public static boolean isSigned_key1() {
        return false;
    }

    /**
     * Return whether the field 'key1' is an array (false).
     */
    public static boolean isArray_key1() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'key1'
     */
    public static int offset_key1() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'key1'
     */
    public static int offsetBits_key1() {
        return 0;
    }

    /**
     * Return the value (as a short) of the field 'key1'
     */
    public short get_key1() {
        return (short)getUIntBEElement(offsetBits_key1(), 8);
    }

    /**
     * Set the value of the field 'key1'
     */
    public void set_key1(short value) {
        setUIntBEElement(offsetBits_key1(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'key1'
     */
    public static int size_key1() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'key1'
     */
    public static int sizeBits_key1() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: key2
    //   Field type: short, unsigned
    //   Offset (bits): 8
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'key2' is signed (false).
     */
    public static boolean isSigned_key2() {
        return false;
    }

    /**
     * Return whether the field 'key2' is an array (false).
     */
    public static boolean isArray_key2() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'key2'
     */
    public static int offset_key2() {
        return (8 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'key2'
     */
    public static int offsetBits_key2() {
        return 8;
    }

    /**
     * Return the value (as a short) of the field 'key2'
     */
    public short get_key2() {
        return (short)getUIntBEElement(offsetBits_key2(), 8);
    }

    /**
     * Set the value of the field 'key2'
     */
    public void set_key2(short value) {
        setUIntBEElement(offsetBits_key2(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'key2'
     */
    public static int size_key2() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'key2'
     */
    public static int sizeBits_key2() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: key3
    //   Field type: short, unsigned
    //   Offset (bits): 16
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'key3' is signed (false).
     */
    public static boolean isSigned_key3() {
        return false;
    }

    /**
     * Return whether the field 'key3' is an array (false).
     */
    public static boolean isArray_key3() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'key3'
     */
    public static int offset_key3() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'key3'
     */
    public static int offsetBits_key3() {
        return 16;
    }

    /**
     * Return the value (as a short) of the field 'key3'
     */
    public short get_key3() {
        return (short)getUIntBEElement(offsetBits_key3(), 8);
    }

    /**
     * Set the value of the field 'key3'
     */
    public void set_key3(short value) {
        setUIntBEElement(offsetBits_key3(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'key3'
     */
    public static int size_key3() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'key3'
     */
    public static int sizeBits_key3() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: key4
    //   Field type: short, unsigned
    //   Offset (bits): 24
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'key4' is signed (false).
     */
    public static boolean isSigned_key4() {
        return false;
    }

    /**
     * Return whether the field 'key4' is an array (false).
     */
    public static boolean isArray_key4() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'key4'
     */
    public static int offset_key4() {
        return (24 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'key4'
     */
    public static int offsetBits_key4() {
        return 24;
    }

    /**
     * Return the value (as a short) of the field 'key4'
     */
    public short get_key4() {
        return (short)getUIntBEElement(offsetBits_key4(), 8);
    }

    /**
     * Set the value of the field 'key4'
     */
    public void set_key4(short value) {
        setUIntBEElement(offsetBits_key4(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'key4'
     */
    public static int size_key4() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'key4'
     */
    public static int sizeBits_key4() {
        return 8;
    }

}
